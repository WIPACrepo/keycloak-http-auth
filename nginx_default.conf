user                          root;
daemon                        off;
worker_processes              1;
load_module                   modules/ngx_http_fancyindex_module.so;
load_module                   modules/ngx_http_dav_ext_module.so;
load_module                   modules/ndk_http_module.so;
load_module                   modules/ngx_http_lua_module.so;
error_log                     /var/log/nginx/error.log notice;
pid                           /var/run/nginx.pid;
events {
  worker_connections          1024;
}
http {
  sendfile                    on;
  keepalive_timeout           65;
  gzip                        on;

  include /etc/nginx/sites-enabled/*;

  server {
    client_max_body_size 20000m;
    client_body_timeout 3600s;
    include /etc/nginx/custom/*;

    port_in_redirect off;
    absolute_redirect off;
    root /mnt;
    index index.html;

    location /tmp {
      internal;
    }

    location / {
      fancyindex              on;
      fancyindex_exact_size   off;
      alias                   /mnt/;
      client_body_temp_path   /mnt/tmp;

      # webdav setup
      dav_methods             PUT DELETE MKCOL COPY MOVE;
      dav_ext_methods         PROPFIND OPTIONS;
      create_full_put_path    on;
      dav_access              group:rw all:r;

      # auth subrequest
      auth_request            /auth;
      auth_request_set        $auth_status $upstream_status;
      auth_request_set        $saved_remote_user $upstream_http_REMOTE_USER;
      auth_request_set        $saved_remote_uid $upstream_http_X_UID;
      auth_request_set        $saved_remote_gid $upstream_http_X_GID;

      # impersonation
      access_by_lua_block {
        local syscall_api = require 'syscall'
        local ffi = require "ffi"
        local nr = require("syscall.linux.nr")
        local sys = nr.SYS
        local uint = ffi.typeof("unsigned int")
        local syscall_long = ffi.C.syscall -- returns long
        local function syscall(...) return tonumber(syscall_long(...)) end
        local function setfsuid(id) return syscall(sys.setfsuid, uint(id)) end
        local function setfsgid(id) return syscall(sys.setfsgid, uint(id)) end
        local new_uid = tonumber(ngx.var.saved_remote_uid)
        local new_gid = tonumber(ngx.var.saved_remote_gid)
        ngx.log(ngx.NOTICE, "[Impersonating User " .. new_uid .. ":" .. new_gid .. "]")
        local previous_uid = setfsuid(new_uid)
        local actual_uid = setfsuid(new_uid)
        local previous_gid = setfsgid(new_gid)
        local actual_gid = setfsgid(new_gid)
        if actual_uid ~= new_uid or actual_gid ~= new_gid then
          ngx.log(ngx.CRIT, "Unable to impersonate users")
          ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
        end
      }
    }
  }
}